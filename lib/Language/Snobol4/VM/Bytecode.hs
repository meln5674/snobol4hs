{-|
Module          : Language.Snobol4.VM.Bytecode
Description     : Bytecode language
Copyright       : (c) Andrew Melnick 2016
License         : MIT
Maintainer      : meln5674@kettering.edu
Portability     : Unknown
-}

{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DefaultSignatures #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Language.Snobol4.VM.Bytecode where

import Control.Monad

import Data.Serialize
import GHC.Generics

import Data.Map (Map)
import qualified Data.Map as M

import Data.Vector (Vector)
import qualified Data.Vector as V 

import Language.Snobol4.Interpreter.Data
import Language.Snobol4.Interpreter.Error
import Language.Snobol4.Interpreter.Internal.StateMachine
import Language.Snobol4.Syntax.AST

-- | Type used to reference unevaluated expressions
type ExprKey = SystemLabel

-- | An instruction with a label
data LabeledInstruction = LabeledInstruction Snobol4String Instruction

-- | A compiled program
newtype CompiledProgram = CompiledProgram { getCompiledProgram :: Vector Instruction }
  deriving Show

-- | A variable name, function name, or user defined label
newtype Symbol = Symbol { getSymbol :: Snobol4String }
  deriving (Show, Eq, Ord)

-- | A label generated by the compiler
newtype SystemLabel = SystemLabel Snobol4Integer
  deriving (Show, Eq, Ord, Enum, Num)

-- | Additional data accompanying a compiled program
data SymbolTable
    = SymbolTable
    { -- | Table of addresses of user defined labels
      userLabels :: Map Snobol4String Address
      -- | Table of address of compiler generated labels
    , systemLabels :: Map SystemLabel (Maybe Address)
      -- | Table of variable names
    , varSymbols :: Map Snobol4String Symbol
      -- | Table of function names
    , funcSymbols :: Map Snobol4String Symbol
      -- | Address of first instruction to execute
    , programEntryPoint :: Address
    }
  deriving Show

-- | Symbol table with no table entries and entry point is the first instruction
emptySymbolTable :: SymbolTable
emptySymbolTable
    = SymbolTable
      M.empty
      M.empty
      M.empty
      M.empty
      (Address 0)


-- | A bytecode instruction.
data Instruction
    = 
    -- | Push a string onto the stack
      PushString Snobol4String
    -- | Push an integer onto the stack
    | PushInteger Snobol4Integer
    -- | Push a real onto the stack
    | PushReal Snobol4Real
    -- | Push a reference to a variable onto the stack
    | PushReference Snobol4String
    -- | Push a reference to a keyword onto the stack
    | PushReferenceKeyword Snobol4String
    -- | Push a reference to a array/table onto the stack
    -- This instruction assumes that there are sufficient arguments already on the stack
    | PushReferenceAggregate Snobol4String Snobol4Integer
    -- | Push a reference to the input variable onto the stack
    | PushReferenceInput
    -- | Push a reference to the output variable onto the stack
    | PushReferenceOutput
    -- | Push a reference to the punch variable onto the stack
    | PushReferencePunch
    -- | Push the entry point of an unevaluated expression onto the stack
    | PushExpression SystemLabel
    -- | Pop the top value off of the stack
    | Pop
    -- | Make N copies of the top value of the stack, including the current instance
    | Copy Int
    -- | Reverse the order of the top two items on the stack
    | Rotate
    
    -- | Pop the top item off the stack, and push the value of the variable with
    -- that name
    | LookupDynamic
    -- | Push the value of the given variable
    | LookupStatic Symbol
    -- | Pop the specified number of arguments off the stack and push the entry
    -- of the given variable at those indices
    | LookupStaticRef Symbol Int
    -- | Push the value of the given keyword
    | LookupStaticKeyword Symbol
    
    -- | Pop the top item off the stack and assign the given variable to it
    | AssignStatic Symbol
    -- | Pop the top item off the stack and assign the given keyword to it
    | AssignStaticKeyword Symbol
    -- | Pop the top item off the stack, followed by N arguments, and assign the
    -- entry in the given variable indexed by the arguments to the top item
    | AssignRefStatic Symbol Int
    -- | Pop the top two items off the stack, assign the variable pointed to by
    -- the first to the second
    | AssignDynamic

    -- | Call the specified functions with N arguments currently on the stack.
    -- Also specifies if the call should be treated as an LValue
    | CallStatic Symbol Int Bool
    
    -- | Return from the current function call successfully
    | Return
    -- | Return from the current function call unsuccessfully
    | FReturn
    -- | Return from the current function call successfully with the return
    -- value translated into a reference
    | NReturn

    -- | Return from an unevaluated expression
    | ExprReturn

    
    -- | Overwrite the system label to jump to on failure
    | SetFailLabel SystemLabel
    -- | Push the current failure label onto the stack and then overwrite it
    | PushFailLabel SystemLabel
    -- | Overwrite the failure label by popping off the stack
    | PopFailLabel
    -- | Jump to the failure label
    | JumpToFailureLabel

    -- | Jump to a compiler defined label
    | JumpStatic SystemLabel
    -- | Pop a label off the stack and jump to the user defined label with that
    -- name
    | JumpDynamic
    -- | Pop a label off the stack and jump to the generated code object with
    -- that name
    | DirectJump
    
    -- | Call the synonym for the given binary operator
    | BinOp Operator
    -- | Call the synonym for the given unary operator
    | UnOp Operator
    
    -- | Invoke the scanner
    | InvokeScanner
    -- | Invoke the replacer
    | InvokeReplacer
    
    -- | Panic with the given error
    | Panic ProgramError
    -- | Terminate the program successfully
    | Finish

    -- | Read from input and push it onto the stack
    | Input
    -- | Pop the top item off the stack and write it to output
    | Output
    -- | Pop the top item off the stack and punch it
    | Punch
    
    -- | Push the last item written to output onto the stack  
    | LastOutput
    -- | Push the last item punched onto the stack
    | LastPunch
  deriving (Show)

deriving instance Serialize Address
deriving instance Generic SymbolTable
deriving instance Generic Operator
deriving instance Generic ProgramError
deriving instance Generic SystemLabel
deriving instance Generic Symbol
deriving instance Generic Instruction

-- | Serialize as a list
instance Serialize a => Serialize (Vector a) where
    get = liftM V.fromList get
    put = put . V.toList

-- | Serialize as a string
instance Serialize Snobol4String where
    put = put . (unmkString :: Snobol4String -> String)
    get = liftM mkString (get :: Get String)

-- | Serialize an an int
instance Serialize Snobol4Integer where
    put = put . (unmkInteger :: Snobol4Integer -> Int)
    get = liftM mkInteger (get :: Get Int)

-- | Serialize as a float
instance Serialize Snobol4Real where
    put = put . (unmkReal :: Snobol4Real -> Float)
    get = liftM mkReal (get :: Get Float)

-- | Auto-generated
instance Serialize Operator
-- | Auto-generated
instance Serialize ProgramError
-- | Auto-generated
instance Serialize SystemLabel
-- | Auto-generated
instance Serialize Symbol
-- | Auto-generated
instance Serialize Instruction
-- | Auto-generated
instance Serialize SymbolTable

deriving instance Serialize CompiledProgram
